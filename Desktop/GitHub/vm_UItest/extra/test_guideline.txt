以seely为例
    1.页面跳转正确（关注点：是否存在无效链接，响应异常等）
    2.UI样式正确（UI走查，目前Designer负责）
    3.功能测试（各业务场景下用例执行）
        a.首先业务场景覆盖要尽量趋近100%
        b.碰到响应与预期不符时，需开启debug，校对接口定义，快速定位问题
        并提交问题缺陷;(BUG要素：其核心功能是需要帮助开发人员快速定位到问题，
        专业的bug记录除去一些title，内容需要满足以下条件：操作步骤、
        现象、error message、如果已经定位到了接口异常，就直接可以写传参
        遗漏、或者传参错误)
        c.遇见虽符合预期，但需求稿存在明显缺陷的问题（显然这类问题在需求
        设计时，未考虑完全），报告现象，交由产品决定是否做优化修改。//
        案例：seely访问事件状态和文案的对应关系，在需求稿设计时，存在
        部分状态共用同一个文案的情况，导致列表状态筛选备选项出现重复的
        文案，但其实它们代表的含义是不同的。这显然在用户使用时会有
        很大困扰；
        d.问题修复完后，进行回归测试，关注点有二：提交的问题是否修复成功。
        修改后是否引入新的问题缺陷。
    4.性能测试：如果有明确性能需求，就需要找到有性能要求的接口，针对此
    设计对应并发用例、以及整个业务场景下的稳定性测试;具体案例可参考
    confluence-testing下的stress test report文件；主要关注参数为：
        95%百分位、异常%、吞吐量、响应时间折线图（观测响应时间波动稳定性）
    5.自动化测试：
        进行时间段为产品基本稳定后，只有一些优化或者小需求；
        a.UI自动化：主要采用Python + Selenium + UnitTest框架，原理是模拟用户对页面
        的一系列操作，再串连成完整业务场景，添加断言，自动输出测试日志及报告；
        框架方面采用PO管理设计思想，这个后面Seminar会提到，便于元素定位管理、
        用例管理、页面维护、以及加强代码可读性；这块相较接口自动化而言，更加具
        不确定性，容易搞得费力不讨好；需要产品UI界面成熟，不做大的改动情况下，
        可进行开发；反之，产品UI界面变得比北京天气还快，那就建议暂时别做了。

        -----------------------------

        b.接口自动化：主要采用Python + Requests + UnitTest框架，主要思路是先访问到DB
        进行数据初始化，这一步的目的是避免case中的数据在系统中已有重复，造成
        脚本运行出现异常；另外这里也可以顺道预先封装好数据库的一些CURD操作，
        以便后面查询获取URL带的ID。然后用unittest框架，每条case函数名称都会
        用test冠名，然后拉取执行，用例读取用ddt实现；可能还要用到Excel轮调用
        的方法，实现的逻辑是：用文件名称-sheet名称-列名定位到字段，然后轮着取
        用里面的数据(ExcelUtil.py)；说起接口测试用例设计思路，内容较多，简单
        列下：
        目的：测试接口的正确性和稳定性；
            原理：模拟客户端向服务器发送请求报文，服务器接收请求报文后对相应的报文
            做处理并向客户端返回应答，客户端接收应答的过程；
        重点：检查数据的交换，传递和控制管理过程，还包括处理的次数；
        核心：持续集成是接口测试的核心；
        优点：为高复杂性的平台带来高效的缺陷监测和质量监督能力，平台越复杂，系统越庞大，
            接口测试的效果越明显（提高测试效率，提升用户体验，降低研发成本）；
            用例设计重点：通常情况下主要测试最外层的两类接口:数据进入系统接口（调用外部系统
            的参数为本系统使用）和数据流出系统接口（验证系统处理后的数据是否正常）；
        PS：设计用例时还需要注意外部接口提供给使用这些接口的外部用户什么功能，外部用户真正需要什么功能；
        1.输入
            输入参数主要从以下几各方面设计：
            a 必填项校验
            b 参数长度校验
            c 参数值的有效性校验
            d 参数组合校验
            e 如果参数是枚举值，一定要各种枚举值都要测试，因为可能不同的枚举走的不同的业务流程；
            f 参数值的默认值的校验
            g 某些参数具有特定的生成规则，要单独针对生成规则设计用例，一定要保证真实有效的数据是可以验证通过的。

            打个比方，身份证号中间几位 ***19860701*，可能输入***19861001*这种值校验就不正确？

        2.接口逻辑
            接口逻辑我用的设计方法是分支覆盖—>路径覆盖—>场景覆盖,同样也是要结合实际业务场景，根本不发生的业务场景就是无效的测试用例。

            a 第一步先把业务流程图画出来；
            b 依据路程图中的分支分别设计，不同分支不同的场景，这里就要把异常的场景考虑进去；如接口超时，
            接口异常，接口请求成功或失败，成功后怎么处理，失败后流程是否继续执行，失败后的数据怎么处理；
                以签到接口为例：
                签到结果有签到成功或签到失败，成功后怎么处理，需要回写签到成功状态，失败后怎么处理，也需要回写失败状态
                失败后的数据可以操作退回？也可以操作重新签到？等等；
            c 测试逻辑设计完成后要想一想不同的业务场景怎么去测试，需要哪些人员协助，
            如接口超时怎么去测试，请求重复怎么去测试，请求并发怎么去测试

        3.输出
        输入结果：正常输出和异常输出，常用的方法有错误推断法（列举出程序中可能存在的错误或者异常，根据他们选择测试用例）

        4.以上都完成后，要结合实际的业务场景去掉冗余的用例（即实际业务场景不存在的流程或者输入数据）；

        5.如果业务流程涉及到状态转换，要单独设计用户—方法：状态转换图；

        6.另外，用例设计中还应当包含异常流程中产生的异常数据的处理流程；—通常所说的补偿机制，
        这块流程能大大的减轻人工运营的工作量，当然，这需要在做系统设计的时候就需要把这部分考虑进去。






        这事我本没有什么成见，但是燕西这东西，太胡闹。上半年骗了我好几个月，说是
        开什么诗社。原来他倒是每月花几百块钱，在外自赁房子住。为了一个女子，就肯
        另立一个家，和人做街坊，慢慢地去认识。用心实在也用心，下工夫实在也肯下
        工夫。但是有这种工夫，何不移到读书上去？老实说，他简直是靠他几个臭钱，
        去引诱人家的。这种婚姻，基础太不正当，成就了也没有什么好处。严格一点地说，
        就是拆白。我四个儿子，全是正经事一样不懂，在这女色
        和一切嗜好上，是极力地下工夫，我恨极了。
        


